#! /usr/bin/python3

import string
import re
import argparse


def generate_and_insert_toc(filepath):
    """
    This script generates a table of contents for a markdown file.
    If an existing TOC is present, it replaces it, otherwise, it inserts a new one.
    
    Args:
        filepath (str): The path to the markdown file.
    """
    full_file = []  # Store all lines of the file
    headers = []  # Store all headers found in the file

    # Regex pattern for headers
    header_pattern = re.compile(r"^(#{2,3}) (.*)$")

    # TOC start and end line numbers
    toc_start = None
    toc_end = None

    # Flag for code blocks
    is_in_code_block = False

    try:
        with open(filepath, "r") as file:
            for line_number, line in enumerate(file):
                full_file.append(line)
    
                if line.startswith("```"):
                    # Flipping the boolean to track if we're in a code block
                    is_in_code_block = not is_in_code_block
                    continue
                elif is_in_code_block or line.startswith("## Table of Contents"):
                    continue
    
                # Finds headers
                header_match = header_pattern.match(line)
                if header_match:
                    headers.append(header_match.group(0))
    
                # Finds TOC start and end line numbers
                if line.startswith("<!-- TOC -->"):
                    toc_start = line_number
                elif line.startswith("<!-- /TOC -->"):
                    toc_end = line_number
    
        toc = generate_toc(headers)
    
        # Replaces TOC
        if toc_start is not None and toc_end is not None:
            replace_toc(full_file, toc, toc_start, toc_end, filepath)
    
        # Inserts TOC
        else:
            for line in toc:
                print(line)
    except FileNotFoundError:
        print(f"File {filepath} does not exist.")
    except Exception as e:
        print(f"An error occurred: {e}")


def generate_toc(headers):
    """
    Generates a table of contents from a list of headers.
    
    Args:
        headers (list): A list of markdown headers.

    Returns:
        list: A list of lines that make up the TOC.
    """
    special_chars = string.punctuation.replace("-", "").replace("_", "")
    toc = ["## Table of Contents\n"]

    for heading in headers:
        level = heading.count("#")
        title = heading[level:].strip()
        link = (
            title.casefold()
            .replace(" ", "-")
            .translate(str.maketrans("", "", special_chars))
        )
        toc.append("    " * (level - 2) + f"1. [{title}](#{link})")

    toc.insert(0, "<!-- TOC -->")
    toc.append("<!-- /TOC -->")

    return toc


def replace_toc(full_file, toc, toc_start, toc_end, filepath):
    """
    Replaces the existing TOC with the new one.
    
    Args:
        full_file (list): A list of all lines in the file.
        toc (list): A list of lines that make up the TOC.
        toc_start (int): The line number where the TOC starts.
        toc_end (int): The line number where the TOC ends.
        filepath (str): The path to the file.
    """
    try:
        with open(filepath, "w") as file:
            file.writelines(full_file[:toc_start])
            for line in toc:
                file.write(line + "\n")
            file.writelines(full_file[toc_end + 1 :])
    except Exception as e:
        print(f"An error occurred while writing to the file: {e}")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Generate a table of contents for a markdown file.")
    parser.add_argument('filepath', help='The path to the markdown file.')
    args = parser.parse_args()
    
    generate_and_insert_toc(args.filepath)

